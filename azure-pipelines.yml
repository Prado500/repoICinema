# azure-pipelines-DIAGNOSTICO.yml
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- checkout: self

# DIAGN√ìSTICO 1: Ver estructura del repositorio
- script: |
    echo "=== DIAGN√ìSTICO INICIAL ==="
    echo "üìÅ Directorio actual: $(pwd)"
    echo ""
    echo "üìÇ Estructura COMPLETA del repositorio:"
    find . -type f -name "*" | head -30
    echo ""
    echo "üìÑ Archivos en ra√≠z:"
    ls -la
    echo ""
    echo "üìÑ Archivos en carpeta app:"
    ls -la app/
    echo ""
    echo "=== FIN DIAGN√ìSTICO INICIAL ==="
  displayName: '1. Diagn√≥stico Estructura Repositorio'

# DIAGN√ìSTICO 2: Verificar update_version.py
- script: |
    echo "=== VERIFICANDO update_version.py ==="
    echo "¬øExiste update_version.py?"
    ls -la update_version.py || echo "‚ùå update_version.py NO EXISTE"
    echo ""
    echo "Contenido de update_version.py:"
    cat update_version.py || echo "‚ùå No se puede leer update_version.py"
    echo "=== FIN VERIFICACI√ìN ==="
  displayName: '2. Verificar update_version.py'

# DIAGN√ìSTICO 3: Verificar app/main.py
- script: |
    echo "=== VERIFICANDO app/main.py ==="
    echo "¬øExiste app/main.py?"
    ls -la app/main.py || echo "‚ùå app/main.py NO EXISTE"
    echo ""
    echo "√öltimas 10 l√≠neas de app/main.py:"
    tail -10 app/main.py || echo "‚ùå No se puede leer app/main.py"
    echo "=== FIN VERIFICACI√ìN ==="
  displayName: '3. Verificar app/main.py'

# DIAGN√ìSTICO 4: Ejecutar update_version.py
- script: |
    echo "=== EJECUTANDO update_version.py ==="
    python update_version.py $(Build.BuildId) || echo "‚ùå Error ejecutando update_version.py"
    echo "=== FIN EJECUCI√ìN ==="
  displayName: '4. Ejecutar update_version.py'

# DIAGN√ìSTICO 5: Verificar rutas de Azure DevOps
- script: |
    echo "=== RUTAS AZURE DEVOPS ==="
    echo "Build.SourcesDirectory: $(Build.SourcesDirectory)"
    echo "Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)"
    echo "Build.BinariesDirectory: $(Build.BinariesDirectory)"
    echo "=== FIN RUTAS ==="
  displayName: '5. Verificar Rutas'

# DIAGN√ìSTICO 6: Copiar archivos MANUALMENTE
- script: |
    echo "=== COPIA MANUAL ==="
    echo "Contenido ANTES de copiar:"
    ls -la $(Build.ArtifactStagingDirectory) || echo "Directorio vac√≠o o no existe"
    echo ""
    echo "Copiando archivos manualmente..."
    cp -r * $(Build.ArtifactStagingDirectory)/ || echo "Error en copia manual"
    echo ""
    echo "Contenido DESPU√âS de copiar:"
    ls -la $(Build.ArtifactStagingDirectory)
    echo "=== FIN COPIA MANUAL ==="
  displayName: '6. Copia Manual de Archivos'

# DIAGN√ìSTICO 7: Verificar que los archivos est√°n en staging
- script: |
    echo "=== VERIFICACI√ìN STAGING ==="
    echo "üìÇ Contenido FINAL de ArtifactStagingDirectory:"
    find "$(Build.ArtifactStagingDirectory)" -type f | head -20
    echo ""
    echo "üìä Tama√±o del directorio:"
    du -sh "$(Build.ArtifactStagingDirectory)"
    echo "=== FIN VERIFICACI√ìN ==="
  displayName: '7. Verificar Staging Directory'

# DIAGN√ìSTICO 8: Intentar publicar artifact
- task: PublishBuildArtifacts@1
  displayName: '8. Publicar Artifact (Prueba)'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'diagnostico'
    publishLocation: 'Container'

# DIAGN√ìSTICO 9: Resultado final
- script: |
    echo "=== RESULTADO DIAGN√ìSTICO ==="
    echo "üéØ Si ves esto, el pipeline al menos ejecut√≥ los scripts"
    echo "üìã Revisa los pasos anteriores para ver d√≥nde est√° el problema"
    echo "=== FIN DIAGN√ìSTICO ==="
  displayName: '9. Resultado Final'